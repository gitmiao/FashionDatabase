/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.yourcompany.struts.action;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import ui.AvailabilityUIAdaptor;

import com.yourcompany.struts.form.SearchAvailForm;

import dao.ProductSearchDAO;
import entity.Store;

/**
 * MyEclipse Struts Creation date: 06-19-2013
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 * @struts.action-forward name="availResult" path="/productSearch.jsp"
 */
public class SearchAvailabilityAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		request.getSession().removeAttribute("availResult");
		final SearchAvailForm searchAvailForm = (SearchAvailForm) form;
		final ProductSearchDAO dao = new ProductSearchDAO();
		final Map<Long, Double> storeAndPrice = dao
				.findAvailability(searchAvailForm.getAvailSearchParams());
		if (storeAndPrice.isEmpty()) {
			final ActionErrors msg = new ActionErrors();
			msg.add("searchAvailResult", new ActionError(
					"noAvailableEntryFound"));
			saveErrors(request, msg);
		} else {
			final Double retail = dao.getRetailprice(searchAvailForm
					.getAvailSearchParams().getApparelId());
			final List<AvailabilityUIAdaptor> result = new ArrayList<AvailabilityUIAdaptor>();
			for (final Entry<Long, Double> oneStore : storeAndPrice.entrySet()) {
				final Store store = dao.findStore(oneStore.getKey());
				result.add(new AvailabilityUIAdaptor(oneStore.getValue()
						.toString(),
						retail == null ? "n/a" : (String
								.format("%2s",
										(int) (100 - 100 * oneStore.getValue()
												/ retail)) + "% off"), store
								.getName(), store.getPhone(), store
								.getWebsite() == null ? "n/a" : store
								.getWebsite(), store.getAddress()
								.toUSFormatString()));
			}
			request.getSession().setAttribute("availResult", result);
		}
		dao.closeConnection();
		return mapping.findForward("availResult");
	}
}